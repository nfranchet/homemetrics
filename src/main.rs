use anyhow::Result;
use log::{info, error};
use clap::Parser;

mod config;
mod imap_client;
mod attachment_parser;
mod temperature_extractor;
mod database;
mod email_processor;

use config::Config;
use email_processor::EmailProcessor;

#[derive(Parser)]
#[command(name = "homemetrics")]
#[command(about = "Client mail HomeMetrics pour r√©cup√©rer les donn√©es X-Sense")]
#[command(version = "0.1.0")]
struct Args {
    /// Mode dry-run : analyse les emails sans sauvegarde en base de donn√©es
    #[arg(short, long)]
    dry_run: bool,
    
    /// R√©pertoire de sauvegarde des pi√®ces jointes (par d√©faut: ./data)
    #[arg(short = 'o', long, default_value = "./data")]
    data_dir: String,
    
    /// Limite du nombre d'emails √† traiter (par d√©faut: illimit√©)
    #[arg(short = 'l', long)]
    limit: Option<usize>,
    
    /// V√©rifier la configuration sans se connecter
    #[arg(long)]
    check_config: bool,
}

#[tokio::main]
async fn main() -> Result<()> {
    // Charger le fichier .env s'il existe
    dotenv::dotenv().ok();
    
    // Parser les arguments CLI
    let args = Args::parse();
    
    // Initialiser le logging
    env_logger::init();
    
    if args.dry_run {
        info!("üß™ D√©marrage en mode DRY-RUN du client mail HomeMetrics X-Sense");
    } else {
        info!("üöÄ D√©marrage du client mail HomeMetrics X-Sense");
    }
    
    // Charger la configuration
    let mut config = Config::new()?;
    
    // Si demand√©, v√©rifier seulement la configuration
    if args.check_config {
        println!("‚úÖ Configuration valide !");
        println!("üìß Serveur IMAP: {}:{}", config.imap.server, config.imap.port);
        println!("üë§ Utilisateur: {}", config.imap.username);
        println!("üìÅ R√©pertoire data: {}", config.data_dir);
        if !args.dry_run {
            println!("üóÑÔ∏è  Base de donn√©es: {}@{}:{}/{}", 
                     config.database.username, config.database.host, 
                     config.database.port, config.database.database);
        }
        return Ok(());
    }
    
    // Remplacer le data_dir par celui des arguments CLI s'il est fourni
    if args.data_dir != "./data" {
        config.data_dir = args.data_dir;
    }
    
    // Lancer le traitement selon le mode
    let result = if args.dry_run {
        // Mode dry-run : pas de connexion base de donn√©es
        let processor = EmailProcessor::new_dry_run(config)?;
        processor.process_emails_dry_run(args.limit).await
    } else {
        // Mode production : avec base de donn√©es
        let mut processor = EmailProcessor::new(config).await?;
        processor.process_emails(args.limit).await
    };
    
    match result {
        Ok(count) => {
            if args.dry_run {
                info!("‚úÖ Analyse dry-run termin√©e avec succ√®s. {} emails analys√©s.", count);
            } else {
                info!("‚úÖ Traitement termin√© avec succ√®s. {} emails trait√©s.", count);
            }
        }
        Err(e) => {
            error!("‚ùå Erreur lors du traitement des emails: {}", e);
            return Err(e);
        }
    }
    
    Ok(())
}
